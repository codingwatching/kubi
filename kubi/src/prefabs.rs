use std::{io::{BufReader, Read}, path::Path};
use hui::text::FontHandle;
use shipyard::{AllStoragesView, NonSendSync, Unique, UniqueView, UniqueViewMut};
use glium::{texture::{SrgbTexture2dArray, MipmapsOption}, Program};
use kubi_shared::block::BlockTexture;
use crate::{filesystem::AssetManager, hui_integration::UiState, rendering::Renderer};

mod texture;
mod shaders;

use texture::load_texture2darray_prefab;
use shaders::include_shader_prefab;

pub trait AssetPaths {
  fn file_name(self) -> &'static str;
}

impl AssetPaths for BlockTexture {
  fn file_name(self) -> &'static str {
    match self {
      Self::Stone         => "stone.png",
      Self::Dirt          => "dirt.png",
      Self::GrassTop      => "grass_top.png",
      Self::GrassSide     => "grass_side.png",
      Self::Sand          => "sand.png",
      Self::Bedrock       => "bedrock.png",
      Self::Wood          => "wood.png",
      Self::WoodTop       => "wood_top.png",
      Self::Leaf          => "leaf.png",
      Self::Torch         => "torch.png",
      Self::TallGrass     => "tall_grass.png",
      Self::Snow          => "snow.png",
      Self::GrassSideSnow => "grass_side_snow.png",
      Self::Cobblestone   => "cobblestone.png",
      Self::Planks        => "planks.png",
      Self::WaterSolid    => "solid_water.png",
      Self::Water         => "water.png",
    }
  }
}

#[derive(Unique)]
#[repr(transparent)]
pub struct BlockTexturesPrefab(pub SrgbTexture2dArray);

#[derive(Unique)]
#[repr(transparent)]
pub struct ChunkShaderPrefab(pub Program);

#[derive(Unique)]
#[repr(transparent)]
pub struct ColoredShaderPrefab(pub Program);

#[derive(Unique)]
#[repr(transparent)]
pub struct Colored2ShaderPrefab(pub Program);

#[derive(Unique)]
#[repr(transparent)]
pub struct UiFontPrefab(pub FontHandle);

pub fn load_prefabs(
  storages: AllStoragesView,
  renderer: NonSendSync<UniqueView<Renderer>>,
  mut ui: NonSendSync<UniqueViewMut<UiState>>,
  assman: UniqueView<AssetManager>
) {
  log::info!("Loading textures...");
  storages.add_unique_non_send_sync(BlockTexturesPrefab(
    load_texture2darray_prefab::<BlockTexture, _>(
      &assman,
      "blocks".into(),
      &renderer.display,
      MipmapsOption::AutoGeneratedMipmaps
    )
  ));

  log::info!("Loading the UI stuff...");
  {
    let asset_handle = assman.open_asset(Path::new("fonts/Crisp.ttf")).unwrap();
    let mut font_data = vec![];
    BufReader::new(asset_handle).read_to_end(&mut font_data).unwrap();
    let font_handle = ui.hui.add_font(&font_data);
    ui.hui.push_font(font_handle);
    storages.add_unique(UiFontPrefab(font_handle));
  }

  log::info!("Compiling shaders...");
  storages.add_unique_non_send_sync(ChunkShaderPrefab(
    include_shader_prefab!(
      "world",
      "../shaders/world.vert",
      "../shaders/world.frag",
      &renderer.display
    )
  ));
  storages.add_unique_non_send_sync(ColoredShaderPrefab(
    include_shader_prefab!(
      "colored",
      "../shaders/colored.vert",
      "../shaders/colored.frag",
      &renderer.display
    )
  ));
  storages.add_unique_non_send_sync(Colored2ShaderPrefab(
    include_shader_prefab!(
      "colored",
      "../shaders/colored2.vert",
      "../shaders/colored2.frag",
      &renderer.display
    )
  ));

  log::info!("releasing shader compiler");

  renderer.display.release_shader_compiler();
}
